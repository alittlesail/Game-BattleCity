
namespace BattleCity;

public class BattleSettlement : ALittle.DisplayLayout
{
	private ALittle.Text _high_score; // 最高分
	private ALittle.Text _stage_num;
	private ALittle.DisplayLayout _player_1_container;
	private ALittle.Text _player_1_score; // 玩家1总分
	private ALittle.Text _1_enemy_1_count; // 玩家1击杀1级坦克数量
	private ALittle.Text _1_enemy_1_score; // 玩家1击杀1级坦克获得分数
	private ALittle.Text _1_enemy_2_score; // 玩家2击杀1级坦克获得分数
	private ALittle.Text _1_enemy_3_score; // 玩家3击杀1级坦克获得分数
	private ALittle.Text _1_enemy_2_count; // 玩家1击杀2级坦克数量
	private ALittle.Text _1_enemy_3_count; // 玩家1击杀3级坦克数量
	private ALittle.Text _1_enemy_total; // 玩家1击杀坦克获得总分
	private ALittle.DisplayLayout _player_2_container;
	private ALittle.Text _player_2_score; // 玩家2总分
	private ALittle.Text _2_enemy_1_count; // 玩家2击杀1级坦克数量
	private ALittle.Text _2_enemy_1_score; // 玩家2击杀1级坦克获得分数
	private ALittle.Text _2_enemy_2_score; // 玩家2击杀2级坦克获得分数
	private ALittle.Text _2_enemy_3_score; // 玩家2击杀3级坦克获得分数
	private ALittle.Text _2_enemy_2_count; // 玩家2击杀2级坦克数量
	private ALittle.Text _2_enemy_3_count; // 玩家2击杀3级坦克数量
	private ALittle.Text _2_enemy_total; // 玩家2击杀坦克获得总分

    private ALittle.LoopList _show_loop;

    public fun Show(Map<int, int> player1_kill, Map<int, int> player2_kill)
    {
        this.visible = true;

        if (this._show_loop != null) { this._show_loop.Stop(); this._show_loop = null; }

        this._player_1_container.visible = g_GCenter.player_count >= 1;
        this._player_2_container.visible = g_GCenter.player_count >= 2;

        var player_1_total = 0;
        var player_2_total = 0;

        var player_1_count = player1_kill[1];
        if (player_1_count == null) player_1_count = 0;
        var player_2_count = player2_kill[1];
        if (player_2_count == null) player_2_count = 0;

        player_1_total += player_1_count;
        player_2_total += player_2_count;
        
        this._show_loop = new ALittle.LoopList();

        this._1_enemy_1_count.text = 0;
        this._1_enemy_1_score.text = 0;
        this._1_enemy_2_count.text = 0;
        this._1_enemy_2_score.text = 0;
        this._1_enemy_3_count.text = 0;
        this._1_enemy_3_score.text = 0;
        this._1_enemy_total.text = "";

        this._2_enemy_1_count.text = 0;
        this._2_enemy_1_score.text = 0;
        this._2_enemy_2_count.text = 0;
        this._2_enemy_2_score.text = 0;
        this._2_enemy_3_count.text = 0;
        this._2_enemy_3_score.text = 0;
        this._2_enemy_total.text = "";

        this._high_score.text = g_GConfig.GetInt("high_score", 2000);
        this._stage_num.text = g_GCenter.stage;

        var player1_data = g_GCenter.player1_data;
        var player2_data = g_GCenter.player2_data;

        this._player_1_score.text = player1_data.score;
        this._player_2_score.text = player2_data.score;

        var group = new ALittle.LoopGroup();
        group.AddUpdater(new ALittle.LoopFunction(bind(this.HandlePlayerEnemyScore, this, this._1_enemy_1_count, this._1_enemy_1_score, this._player_1_score, 1, player1_data), player_1_count, 500, 500));
        group.AddUpdater(new ALittle.LoopFunction(bind(this.HandlePlayerEnemyScore, this, this._2_enemy_1_count, this._2_enemy_1_score, this._player_2_score, 1, player2_data), player_2_count, 500, 500));
        this._show_loop.AddUpdater(group);

        player_1_count = player1_kill[2];
        if (player_1_count == null) player_1_count = 0;
        player_2_count = player2_kill[2];
        if (player_2_count == null) player_2_count = 0;
    
        player_1_total += player_1_count;
        player_2_total += player_2_count;

        group = new ALittle.LoopGroup();
        group.AddUpdater(new ALittle.LoopFunction(bind(this.HandlePlayerEnemyScore, this, this._1_enemy_2_count, this._1_enemy_2_score, this._player_1_score, 2, player1_data), player_1_count, 500, 500));
        group.AddUpdater(new ALittle.LoopFunction(bind(this.HandlePlayerEnemyScore, this, this._2_enemy_2_count, this._2_enemy_2_score, this._player_2_score, 2, player2_data), player_2_count, 500, 500));
        this._show_loop.AddUpdater(group);

        player_1_count = player1_kill[3];
        if (player_1_count == null) player_1_count = 0;
        player_2_count = player2_kill[3];
        if (player_2_count == null) player_2_count = 0;

        player_1_total += player_1_count;
        player_2_total += player_2_count;

        group = new ALittle.LoopGroup();
        group.AddUpdater(new ALittle.LoopFunction(bind(this.HandlePlayerEnemyScore, this, this._1_enemy_3_count, this._1_enemy_3_score, this._player_1_score, 3, player1_data), player_1_count, 500, 500));
        group.AddUpdater(new ALittle.LoopFunction(bind(this.HandlePlayerEnemyScore, this, this._2_enemy_3_count, this._2_enemy_3_score, this._player_2_score, 3, player2_data), player_2_count, 500, 500));
        this._show_loop.AddUpdater(group);

        group = new ALittle.LoopGroup();
        group.AddUpdater(new ALittle.LoopTimer(bind(this.HandlePlayerTotalScore, this, this._1_enemy_total, player_1_total), 1000));
        group.AddUpdater(new ALittle.LoopTimer(bind(this.HandlePlayerTotalScore, this, this._2_enemy_total, player_2_total), 1000));
        this._show_loop.AddUpdater(group);

        this._show_loop.AddUpdater(new ALittle.LoopTimer(bind(this.Hide, this), 1000));

        this._show_loop.Start();
    }

    private fun HandlePlayerEnemyScore(ALittle.Text count_text, ALittle.Text score_text, ALittle.Text player_score, int level, PlayerData player_data)
    {
        var count = ALittle.Math_ToInt(count_text.text);
        count += 1;
        count_text.text = count;
        var score = ALittle.Math_ToInt(score_text.text);
        score += level * 100;
        score_text.text = score;

        player_data.score += score;
        player_score.text = player_data.score;

        var high_score = g_GConfig.GetInt("high_score", 2000);
        if (player_data.score >= high_score)
        {
            high_score = player_data.score;
            g_GConfig.SetConfig("high_score", high_score, true);
            this._high_score.text = high_score;
        }
    }

    public fun HandlePlayerTotalScore(ALittle.Text total, int value)
    {
        total.text = value;
    }

    public fun Hide()
    {
        if (g_GCenter.player_count >= 1) g_GConfig.SetConfig("last_score_1", g_GCenter.player1_data.score, true);
        if (g_GCenter.player_count >= 2) g_GConfig.SetConfig("last_score_2", g_GCenter.player2_data.score, true);
        g_GConfig.SaveConfig();
        this.visible = false;

        g_GCenter.NextStage();
    }
}
