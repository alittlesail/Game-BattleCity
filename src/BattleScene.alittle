
namespace BattleCity;

public class BattleScene : ALittle.DisplayLayout
{
	private ALittle.Quad _quad_up;
	private ALittle.Quad _quad_down;

	private ALittle.TileTable _enemy_tiletable;

    private ALittle.DisplayLayout _player1_contianer;
    private ALittle.DisplayLayout _player2_contianer;
	private ALittle.Text _player1_life;
	private ALittle.Text _player2_life;
	private ALittle.Text _stage_num;

	private ALittle.DisplayLayout _tile_container;
    private Map<int, Map<int, ALittle.Sprite>> _sprite_map;
    private Map<int, Map<int, ALittle.Sprite>> _river_map;

    private ALittle.DisplayLayout _entity_container;

    private ALittle.DisplayLayout _bullet_container;
    private Map<BattleBullet, bool> _bullet_map;

    private ALittle.DisplayLayout _grass_container;

    private ALittle.DisplayLayout _item_container;
    private ALittle.DisplayLayout _effect_container;

    private BattleMap _battle_map;
    private ALittle.LoopList _anti_loop;
    private double _cell_size;

    private BattlePlayer _player_1;
    private BattlePlayer _player_2;

    private ALittle.LoopFrame _frame_loop;

    private Map<BattleRole, bool> _enemy_map;
    private int _enemy_count = 0;			// 敌军数量
    private int _generate_enemy_cool = 0;	// 生成敌军冷却时间
    private double _enemy_width = 0;		 // 敌军的宽
    private double _enemy_height = 0;		// 敌军的高

    private bool _iron_flash = false;		// 是否闪烁
    private double _iron_flash_frame = 0;	// 闪烁帧累计
    private int _iron_flash_brush = 0;
    private int _iron_flash_count = 0;		// 闪烁次数，到达一定次数之后自动停止
    private ALittle.LoopTimer _iron_flash_delay_loop;	// 延迟闪烁

    private double _river_flash_frame = 0;	// 河流闪烁
    private int _river_flash_brush = 0;
    
    private ALittle.LoopTimer _item_stop_delay_loop;

    private ALittle.FramePlay _castle_explosion;

    private bool _is_gameover = false;
    private ALittle.Image _gameover_image;
    private ALittle.LoopList _gameover_loop;

    private Map<int, int> _player1_kill;	// 玩家1击杀数量
    private Map<int, int> _player2_kill;	// 玩家2击杀数量

    private fun TCtor()
    {
        this._player_1 = g_Control.CreateControl{BattlePlayer}("battle_player1");
        this._player_2 = g_Control.CreateControl{BattlePlayer}("battle_player2");

        this._cell_size = this._tile_container.width / (13 * 4);
        
        var enemy = g_Control.CreateControl{BattleEnemy}("battle_enemy");
        this._enemy_width = enemy.width;
        this._enemy_height = enemy.height;
    }

    public get cell_size() : double { return this._cell_size; }
    public get is_gameover() : bool { return this._is_gameover; }

    public async fun Show(int stage)
    {
        this._player1_kill = new Map<int, int>();
        this._player2_kill = new Map<int, int>();

        if (this._anti_loop != null)
        {
            this._anti_loop.Stop();
            this._anti_loop = null;
        }

        this._battle_map = g_Control.LoadMessageFromFile{BattleMap}("Other/Map/stage_"..stage..".map");
        if (this._battle_map == null)
        {
            ALittle.Error("map load filed! Other/Map/stage_"..stage..".map");
            return;
        }

        this._tile_container.RemoveAllChild();
        this._grass_container.RemoveAllChild();
        this._sprite_map = new Map<int, Map<int, ALittle.Sprite>>();
        this._river_map = new Map<int, Map<int, ALittle.Sprite>>();

        // 根据数据构建地图
        for (var row, sub_map in this._battle_map.tile_map)
        {
            for (var col, type in sub_map)
                this.SetTileShow(row, col, type);
        }
        // 收集所有的河流
        for (var row, sub_map in this._sprite_map)
        {
            for (var col, sprite in sub_map)
            {
                if (sprite.col_index >= (BrushType.BT_RIVER - 1) * 4 + 1 && sprite.col_index <= (BrushType.BT_RIVER) * 4)
                {
                    var r_sub_map = this._river_map[row];
                    if (r_sub_map == null)
                    {
                        r_sub_map = new Map<int, ALittle.Sprite>();
                        this._river_map[row] = r_sub_map;
                    }
                    r_sub_map[col] = sprite;
                }
            }
        }
        this._river_flash_brush = BrushType.BT_RIVER;

        if (this._castle_explosion != null)
        {
            this._castle_explosion.Stop();
            this._castle_explosion.visible = false;
        }

        this.visible = true;
        this._is_gameover = false;
        this._gameover_image.visible = false;
        this._iron_flash = false;
        this._iron_flash_brush = BrushType.BT_WALL;

        // 设置第几关
        this._stage_num.text = stage;

        // 设置生命值
        this._player1_life.text = g_GCenter.player1_data.life - 1;
        this._player2_life.text = g_GCenter.player2_data.life - 1;

        // 初始化敌军个数
        this._enemy_tiletable.RemoveAllChild();
        for (var i = 1; i <= 20; 1)
        {
            var icon = g_Control.CreateControl{ALittle.DisplayObject}("enemy_icon");
            this._enemy_tiletable.AddChild(icon);
        }
        this._enemy_map = new Map<BattleRole, bool>();
        this._enemy_count = 0;
        this._generate_enemy_cool = 1000;

        this._bullet_container.RemoveAllChild();
        this._bullet_map = new Map<BattleBullet, bool>();
    
        this._entity_container.RemoveAllChild();
        for (var index, child:BattleItem in this._item_container.childs)
        	child.Stop();
        this._item_container.RemoveAllChild();
    
        this._player_1.RemoveFromParent();
        this._player_2.RemoveFromParent();

        this._player1_contianer.visible = g_GCenter.player_count >= 1;
        this._player2_contianer.visible = g_GCenter.player_count >= 2;

        this._quad_up.y = 0;
        this._quad_up.visible = true;
        this._quad_down.y = 0;
        this._quad_down.visible = true;

        this._anti_loop = new ALittle.LoopList();
        var group = new ALittle.LoopGroup();
        group.AddUpdater(new ALittle.LoopLinear(this._quad_up, "y", -this._quad_up.height, 500, 0));
        group.AddUpdater(new ALittle.LoopLinear(this._quad_down, "y", A_UISystem.view_height, 500, 0));
        this._anti_loop.AddUpdater(group);
        this._anti_loop.AddUpdater(new ALittle.LoopTimer(bind(this.Start, this), 0));

        this._anti_loop.Start();

        A_UISystem.keydown_callback = bind(this.HandleKeyDown, this);

        if (this._frame_loop != null)
            this._frame_loop.Stop();
        this._frame_loop = new ALittle.LoopFrame(bind(this.HandleFrame, this));
        this._frame_loop.Start();
    }

    public fun Hide()
    {
        if (this._frame_loop != null)
        {
            this._frame_loop.Stop();
            this._frame_loop = null;
        }

        if (this._anti_loop != null)
        {
            this._anti_loop.Stop();
            this._anti_loop = null;
        }

        for (var index, child:BattleItem in this._item_container.childs)
        	child.Stop();
        this._item_container.RemoveAllChild();

        if (this._castle_explosion != null)
        {
            this._castle_explosion.Stop();
            this._castle_explosion.visible = false;
        }

        if (this._gameover_loop != null)
        {
            this._gameover_loop.Stop();
            this._gameover_loop = null;
        }

        this.visible = false;
    }

    private fun SetTileShow(int row, int col, int type)
    {
        var sub_map = this._sprite_map[row];
        if (sub_map == null)
        {
            sub_map = new Map<int, ALittle.Sprite>();
            this._sprite_map[row] = sub_map;
        }

        if (sub_map[col] != null)
        	sub_map[col].RemoveFromParent();

            // 设置表现
        var sprite = new ALittle.Sprite(g_Control);
        sprite.texture_name = "tile.png";
        sprite.width = 32 / 4;
        sprite.height = 32 / 4;
        sprite.x = col * sprite.width;
        sprite.y = row * sprite.height;
        sprite.row_count = 4;
        sprite.col_count = 7 * 4;
        sprite.row_index = row % 4 + 1;
        sprite.col_index = col % 4 + 1 + (type - 1) * 4;
        if (type == BrushType.BT_GRASS)
            this._grass_container.AddChild(sprite);
        else
	        this._tile_container.AddChild(sprite);

        sub_map[col] = sprite;
    }

    private fun TryRemoveWall(int row, int col) : bool
    {
        var sub_map = this._sprite_map[row];
        if (sub_map == null) return false;

        var sprite = sub_map[col];
        if (sprite == null) return false;

        if (sprite.col_index >= (BrushType.BT_WALL - 1) * 4 + 1 && sprite.col_index <= (BrushType.BT_WALL) * 4)
        {
            this._tile_container.RemoveChild(sprite);
            sub_map[col] = null;
            return true;
        }
        return false;
    }

    private fun RemoveTileShow(int row, int col)
    {
        var sub_map = this._sprite_map[row];
        if (sub_map == null) return;
    
        if (sub_map[col] != null)
        {
            this._tile_container.RemoveChild(sub_map[col]);
            sub_map[col] = null;
        }
    }

    public fun CanWalkByMap(int row, int col) : bool
    {
        var sub_map = this._sprite_map[row];
        if (sub_map == null) return true;

        var sprite = sub_map[col];
        if (sprite == null) return true;

        return sprite.col_index >= (BrushType.BT_GRASS - 1) * 4 + 1 && sprite.col_index <= (BrushType.BT_GRASS) * 4;
    }

    public fun Collision(double left, double top, double right, double bottom, ALittle.DisplayObject target) : bool
    {
        var not_check = right < target.x || bottom < target.y || target.x + target.width < left || target.y + target.height < top;
        return !not_check;
    }

    public fun Collision2(ALittle.DisplayObject target_1, ALittle.DisplayObject target_2) : bool
    {
        return this.Collision(target_1.x, target_1.y, target_1.x + target_1.width, target_1.y + target_1.height, target_2);
    }

    public fun CanWalkByEntity(BattleRole entity, double left, double top, double right, double bottom) : bool
    {
        if (this._player_1.parent != null && entity != this._player_1 && !this._player_1.explosion && this.Collision(left, top, right, bottom, this._player_1)) return false;
        if (this._player_2.parent != null && entity != this._player_2 && !this._player_2.explosion && this.Collision(left, top, right, bottom, this._player_2)) return false;
        for (var role, _ in this._enemy_map)
        {
            if (entity != role && !role.explosion && this.Collision(left, top, right, bottom, role))
            	return false;
        }
        return true;
    }
    
    // 返回值1：是否碰撞
    // 返回值2：是否需要爆炸
    public fun BulletCollisionByEntity(BattleBullet bullet, double left, double top, double right, double bottom) : bool, bool
    {
        if (bullet.role.is_enemy && this._player_1.parent != null && bullet.role != this._player_1 && this._player_1.alive && this.Collision(left, top, right, bottom, this._player_1))
            return true, this._player_1.BeAttack();

        if (bullet.role.is_enemy && this._player_2.parent != null && bullet.role != this._player_2 && this._player_1.alive && this.Collision(left, top, right, bottom, this._player_2))
            return true, this._player_2.BeAttack();

        if (!bullet.role.is_enemy)
        {
            for (var role, _ in this._enemy_map)
            {
                if (role != bullet.role && role.alive && this.Collision(left, top, right, bottom, role))
                {
                    var death = role.BeAttack();
                    if (death)
                    {
                        if (bullet.role == this._player_1)
                        {
                            var count = this._player1_kill[role.level];
                            if (count == null) count = 0;
                            count += 1;
                            this._player1_kill[role.level] = count;
                        }
                        elseif (bullet.role == this._player_2)
                        {
                            var count = this._player2_kill[role.level];
                            if (count == null) count = 0;
                            count += 2;
                            this._player2_kill[role.level] = count;
                        }
                    }
                    return true, death;
                }
            }
        }
        return false, false;
    }

    private fun ShowGameOver()
    {
        if (this._is_gameover) return;
        this._is_gameover = true;

        this._gameover_image.visible = true;
        this._gameover_loop = new ALittle.LoopList();
        this._gameover_loop.AddUpdater(new ALittle.LoopLinear(this._gameover_image, "y", A_UISystem.view_height / 2, 2000, 0));
        this._gameover_loop.AddUpdater(new ALittle.LoopTimer(bind(g_GCenter.Restart, g_GCenter), 1000));
        this._gameover_loop.Start();
    }

    // 完成关卡
    private fun StageCompleted()
    {
        // 保存当前等级
        g_GCenter.player1_data.level = this._player_1.level;
        g_GCenter.player2_data.level = this._player_2.level;

        g_GCenter.battle_settlement.Show(this._player1_kill, this._player2_kill);
        this.Hide();
    }

    public fun BulletCollisionByMap(int row, int col, bool min_or_max, int dir) : bool
    {
        var sub_map = this._sprite_map[row];
        if (sub_map == null) return false;

        var sprite = sub_map[col];
        if (sprite == null) return false;

        // 如果是铁
        if (sprite.col_index >= (BrushType.BT_IRON - 1) * 4 + 1 && sprite.col_index <= (BrushType.BT_IRON) * 4)
        	return true;

        // 如果是草
        if (sprite.col_index >= (BrushType.BT_GRASS - 1) * 4 + 1 && sprite.col_index <= (BrushType.BT_GRASS) * 4)
        	return false;

        // 如果是河
        if (sprite.col_index >= (BrushType.BT_RIVER - 1) * 4 + 1 && sprite.col_index <= (BrushType.BT_RIVER) * 4)
        	return false;
        if (sprite.col_index >= (BrushType.BT_RIVER2 - 1) * 4 + 1 && sprite.col_index <= (BrushType.BT_RIVER2) * 4)
        	return false;

        // 如果是城堡
        if (sprite.col_index >= (BrushType.BT_CASTLE2 - 1) * 4 + 1 && sprite.col_index <= (BrushType.BT_CASTLE2) * 4)
        	return false;
        if (sprite.col_index >= (BrushType.BT_CASTLE - 1) * 4 + 1 && sprite.col_index <= (BrushType.BT_CASTLE) * 4)
        {
            // 整个鸟巢作为废墟
            for (var r = 12*4; r < 13*4; 1)
            {
                for (var c = 6*4; c < 7*4; 1)
                	this.SetTileShow(r, c, BrushType.BT_CASTLE2);
            }
            // 显示一个爆炸效果
            if (this._castle_explosion == null)
            {
                this._castle_explosion = g_Control.CreateControl{ALittle.FramePlay}("effect_explosion_big");
                this._castle_explosion.x = this.map_size / 2 - this._castle_explosion.width / 2;
                this._castle_explosion.y = this.map_size - this._cell_size * 2 - this._castle_explosion.height / 2;
                this._effect_container.AddChild(this._castle_explosion);
            }
            this._castle_explosion.visible = true;
            this._castle_explosion.Play();

            this.ShowGameOver();
        	return true;
        }

        // 如果是墙
        if (sprite.col_index >= (BrushType.BT_WALL - 1) * 4 + 1 && sprite.col_index <= (BrushType.BT_WALL) * 4)
        {
            if (dir == DirType.DT_UP || dir == DirType.DT_DOWN)
            {
                this.TryRemoveWall(row, col);
                if (min_or_max)
                    this.TryRemoveWall(row, col - 1);
                else
                    this.TryRemoveWall(row, col + 1);
            }
            else
            {
                this.TryRemoveWall(row, col);

                if (min_or_max)
                	this.TryRemoveWall(row - 1, col);
                else
                    this.TryRemoveWall(row + 1, col);
            }
            return true;
        }

        return false;
    }

    public fun IsEnemyStopping() : bool
    {
        return this._item_stop_delay_loop != null && !this._item_stop_delay_loop.IsCompleted();
    }

    public fun FireBullet(BattleRole role, double speed)
    {
        var bullet = g_Control.CreateControl{BattleBullet}("battle_bullet");
        if (role.dir == DirType.DT_UP)
        {
            bullet.x = role.x + role.width / 2 - bullet.width / 2;
            bullet.y = role.y;
        }
        elseif (role.dir == DirType.DT_RIGHT)
        {
            bullet.x = role.x + role.width - bullet.width;
            bullet.y = role.y + role.height / 2 - bullet.height / 2;
        }
        elseif (role.dir == DirType.DT_DOWN)
        {
            bullet.x = role.x + role.width / 2 - bullet.width / 2;
            bullet.y = role.y + role.height - bullet.height;
        }
        else
        {
            bullet.x = role.x;
            bullet.y = role.y + role.height / 2 - bullet.height / 2;
        }
        bullet.Init(role.dir, role, speed);
        this._bullet_container.AddChild(bullet);
        this._bullet_map[bullet] = true;
    }

    // 生成道具
    public fun GenerateItem()
    {
        // 清空所有道具
        for (var index, child:BattleItem in this._item_container.childs)
            child.Stop();
        this._item_container.RemoveAllChild();

        // 随机一个位置
        var row = ALittle.Math_RandomInt(0, 12 * 4);
        var col = ALittle.Math_RandomInt(0, 12 * 4);

        // 随机一个道具
        var item_type = ALittle.Math_RandomInt(ItemType.IT_LIFE, ItemType.IT_SHIELD);

        // 创建控件
        var item = g_Control.CreateControl{BattleItem}("battle_item");
        item.sprite.col_index = item_type;
        item.x = row * this._cell_size;
        item.y = col * this._cell_size;
        this._item_container.AddChild(item);
        item.Play();
    }

    // 生成敌军
    public fun GenerateEnemy()
    {
        // 随机出生点
        var born_pos = new List<int>();
        born_pos[1] = 0;
        born_pos[2] = 6;
        born_pos[3] = 12;

        // 洗牌
        ALittle.List_Shuffle(born_pos);

        for (var index, pos in born_pos)
        {
            var failed = false;
            // 内部格子是否被占领
            for (var row = 0; row < 4; 1)
            {
                for (var col = pos * 4; col < (pos + 1) * 4; 1)
                {
                    if (!this.CanWalkByMap(row, col))
                    {
                        failed = true;
                        break;
                    }
                }

                if (failed) break;
            }

            if (!failed)
            {
                var left = pos * 4 * this._cell_size;
                var right = left + this._enemy_width;
                if (!this.CanWalkByEntity(null, left, 0, right, this._enemy_height))
                    failed = true;
            }

            if (!failed)
            {
                this._enemy_tiletable.RemoveChild(this._enemy_tiletable.childs[this._enemy_tiletable.child_count]);
                var enemy = g_Control.CreateControl{BattleEnemy}("battle_enemy");
                this._enemy_map[enemy] = true;
                enemy.StartBorn(0, pos * 4, ALittle.Math_RandomInt(1, 3), DirType.DT_DOWN, ALittle.Math_RandomInt(1, 100) > 80);
                this._entity_container.AddChild(enemy);
                this._enemy_count += 1;
                this._generate_enemy_cool = 1000;
                break;
            }
        }
    }

    public get map_size() : double { return this._tile_container.width; }

    private fun Start()
    {
        if (g_GCenter.player_count >= 1)
        {
            this._entity_container.AddChild(this._player_1);
            this._player_1.StartBorn(12 * 4, 4* 4, g_GCenter.player1_data.level, DirType.DT_UP, 0.08);
        }

        if (g_GCenter.player_count >= 2)
        {
            this._entity_container.AddChild(this._player_2);
            this._player_2.StartBorn(12 * 4, 8* 4, g_GCenter.player2_data.level, DirType.DT_UP, 0.08);
        }
    }

    private fun HandleFrame(int frame_time)
    {
        // 尝试生成敌军
        if (this._enemy_count < 4 && this._enemy_tiletable.child_count > 0)
        {
            this._generate_enemy_cool -= frame_time;
            if (this._generate_enemy_cool <= 0)
            	this.GenerateEnemy();
        }

        if (!this._is_gameover)
        {
            if (A_UISystem.sym_map[ALittle.UIEnumTypes.KEY_A])
            {
                if (this._player_1.parent != null && this._player_1.alive)
                    this._player_1.Walk(DirType.DT_LEFT, frame_time);
            }
            elseif (A_UISystem.sym_map[ALittle.UIEnumTypes.KEY_W])
            {
                if (this._player_1.parent != null && this._player_1.alive)
                    this._player_1.Walk(DirType.DT_UP, frame_time);
            }
            elseif (A_UISystem.sym_map[ALittle.UIEnumTypes.KEY_S])
            {
                if (this._player_1.parent != null && this._player_1.alive)
                    this._player_1.Walk(DirType.DT_DOWN, frame_time);
            }
            elseif (A_UISystem.sym_map[ALittle.UIEnumTypes.KEY_D])
            {
                if (this._player_1.parent != null && this._player_1.alive)
                    this._player_1.Walk(DirType.DT_RIGHT, frame_time);
            }

            if (A_UISystem.sym_map[ALittle.UIEnumTypes.KEY_LEFT])
            {
                if (this._player_2.parent != null && this._player_2.alive)
                    this._player_2.Walk(DirType.DT_LEFT, frame_time);
            }
            elseif (A_UISystem.sym_map[ALittle.UIEnumTypes.KEY_UP])
            {
                if (this._player_2.parent != null && this._player_2.alive)
                    this._player_2.Walk(DirType.DT_UP, frame_time);
            }
            elseif (A_UISystem.sym_map[ALittle.UIEnumTypes.KEY_DOWN])
            {
                if (this._player_2.parent != null && this._player_2.alive)
                    this._player_2.Walk(DirType.DT_DOWN, frame_time);
            }
            elseif (A_UISystem.sym_map[ALittle.UIEnumTypes.KEY_RIGHT])
            {
                if (this._player_2.parent != null && this._player_2.alive)
                    this._player_2.Walk(DirType.DT_RIGHT, frame_time);
            }
        }

        if (this._player_1.parent != null) this._player_1.UpdateFrame(frame_time);
        if (this._player_2.parent != null) this._player_2.UpdateFrame(frame_time);
        for (var enemy, _ in this._enemy_map) enemy.UpdateFrame(frame_time);
        for (var bullet, _ in this._bullet_map) bullet.UpdateFrame(frame_time);

        for (var bullet_1, _1 in this._bullet_map)
        {
            for (var bullet_2, _2 in this._bullet_map)
            {
                if (bullet_1 != bullet_2 && bullet_1.alive && bullet_2.alive
                	&& bullet_1.role.is_enemy != bullet_2.role.is_enemy
                    && this.Collision2(bullet_1, bullet_2))
                {
                    bullet_1.BulletEnd();
                    bullet_2.BulletEnd();
                }
            }
        }

        var remove_map:Map<ALittle.DisplayObject, bool>;
        for (var index, child:BattleItem in this._item_container.childs)
        {
            var player:BattlePlayer = null;
            var player_data:PlayerData = null;
            var player_life:ALittle.DisplayObject = null;
            if (this._player_1.parent != null && this._player_1.alive && this.Collision2(this._player_1, child))
            {
                player = this._player_1;
                player_data = g_GCenter.player1_data;
                player_life = this._player1_life;
            }
            elseif (this._player_2.parent != null && this._player_2.alive && this.Collision2(this._player_2, child))
            {
            	player = this._player_2;
                player_data = g_GCenter.player2_data;
                player_life = this._player2_life;
            }

            if (player != null)
            {
                if (child.sprite.col_index == ItemType.IT_LIFE)
                {
                    player_data.life += 1;
                    player_life.text = player_data.life - 1;
                }
                elseif (child.sprite.col_index == ItemType.IT_STAR)
                {
                    player.LevelUp();
                    player_data.level = player.level;
                }
                elseif (child.sprite.col_index == ItemType.IT_BOMB)
                {
                    for (var enemy, _ in this._enemy_map)
                    {
                        if (enemy.alive)
                        	enemy.StartExplosion();
                    }
                }
                elseif (child.sprite.col_index == ItemType.IT_IRON)
                {
                    this._iron_flash = false;
                    this._iron_flash_count = 0;
                    this._iron_flash_frame = 0;

                    // 把这几个位置设置为墙
                    var brush_type = BrushType.BT_IRON;
                    for (var row = 11 * 4 + 2; row <= 11 * 4 + 3; 1)
                    {
                        for (var col = 5*4+2; col <= 5*4+9; 1)
                            this.SetTileShow(row, col, brush_type);
                    }

                    for (var row = 12 * 4 + 0; row <= 12 * 4 + 3; 1)
                    {
                        for (var col = 5* 4 + 2; col <= 5* 4 + 3; 1)
                            this.SetTileShow(row, col, brush_type);
                    }

                    for (var row = 12 * 4 + 0; row <= 12 * 4 + 3; 1)
                    {
                        for (var col = 5* 4 + 8; col <= 5* 4 + 9; 1)
                            this.SetTileShow(row, col, brush_type);
                    }

                    if (this._iron_flash_delay_loop != null)
                    	this._iron_flash_delay_loop.Stop();
                    this._iron_flash_delay_loop = new ALittle.LoopTimer(bind(this.StartIronFlash, this), 10000);
                    this._iron_flash_delay_loop.Start();
                }
                elseif (child.sprite.col_index == ItemType.IT_SHIELD)
                {
                    player.StartShield();
                }
                elseif (child.sprite.col_index == ItemType.IT_STOP)
                {
                    if (this._item_stop_delay_loop != null)
                        this._item_stop_delay_loop.Stop();
                    this._item_stop_delay_loop = new ALittle.LoopTimer(bind(this.ItemStopEnd, this), 10000);
                    this._item_stop_delay_loop.Start();
                }

                if (remove_map == null) remove_map = new Map<ALittle.DisplayObject, bool>();
                remove_map[child] = true;
            }
        }

        if (remove_map != null)
        {
            for (var child, _ in remove_map)
            	this._item_container.RemoveChild(child);
        }

        // 闪烁
        if (this._iron_flash)
        {
            var brush_type = BrushType.BT_WALL;
            this._iron_flash_frame += 0.005 * frame_time;
            if (this._iron_flash_frame >= 2) this._iron_flash_frame = 0;
            if (this._iron_flash_frame > 1)
            {
                this._iron_flash_count += 1;
                brush_type = BrushType.BT_IRON;
            }
            else
            {
                if (this._iron_flash_count >= 100)
                    this._iron_flash = false;
            }

            if (this._iron_flash_brush != brush_type)
            {
                this._iron_flash_brush = brush_type;

                // 把这几个位置设置为墙
                for (var row = 11 * 4 + 2; row <= 11 * 4 + 3; 1)
                {
                    for (var col = 5*4+2; col <= 5*4+9; 1)
                        this.SetTileShow(row, col, brush_type);
                }

                for (var row = 12 * 4 + 0; row <= 12 * 4 + 3; 1)
                {
                    for (var col = 5* 4 + 2; col <= 5* 4 + 3; 1)
                        this.SetTileShow(row, col, brush_type);
                }

                for (var row = 12 * 4 + 0; row <= 12 * 4 + 3; 1)
                {
                    for (var col = 5* 4 + 8; col <= 5* 4 + 9; 1)
                        this.SetTileShow(row, col, brush_type);
                }
            }
        }

        var brush_type = BrushType.BT_RIVER;
        this._river_flash_frame += 0.0008 * frame_time;
        if (this._river_flash_frame >= 2) this._river_flash_frame = 0;
        if (this._river_flash_frame > 1) brush_type = BrushType.BT_RIVER2;

        if (this._river_flash_brush != brush_type)
        {
            this._river_flash_brush = brush_type;
            // 河流闪烁
            for (var row, sub_map in this._river_map)
            {
                for (var col, sprite in sub_map)
                    this.SetTileShow(row, col, this._river_flash_brush);
            }
        }

        if (this._enemy_count <= 0 && this._enemy_tiletable.child_count == 0)
        {
            this.StageCompleted();
        }
    }

    private fun ItemStopEnd()
    {
        this._item_stop_delay_loop = null;
    }

    private fun StartIronFlash()
    {
        this._iron_flash = true;
        this._iron_flash_count = 0;
        this._iron_flash_frame = 0;
    }

    private fun HandleKeyDown(int mod, int sym, int scancode)
    {
        if (sym == ALittle.UIEnumTypes.KEY_J)
        {
            if (this._player_1.parent != null && !this._player_1.alive) return;
            this._player_1.Fire();
        }

        if (sym == ALittle.UIEnumTypes.KEY_1)
        {
            if (this._player_2.parent != null && !this._player_2.alive) return;
            this._player_2.Fire();
        }
    }

    public fun RoleDeath(BattleRole role)
    {
        this._entity_container.RemoveChild(role);

        if (role == this._player_1)
        {
            g_GCenter.player1_data.life -= 1;
            if (g_GCenter.player_count >= 1 && g_GCenter.player1_data.life >= 1)
            {
                g_GCenter.player1_data.level = 1;
                this._player1_life.text = g_GCenter.player1_data.life - 1;
                this._entity_container.AddChild(this._player_1);
                this._player_1.StartBorn(12 * 4, 4* 4, g_GCenter.player1_data.level, DirType.DT_UP, 0.08);
            }
        }
        elseif (role == this._player_2)
        {
            g_GCenter.player2_data.life -= 1;
            if (g_GCenter.player_count >= 2 && g_GCenter.player2_data.life >= 1)
            {
                g_GCenter.player2_data.level = 1;
                this._player2_life.text = g_GCenter.player2_data.life - 1;
                this._entity_container.AddChild(this._player_2);
                this._player_2.StartBorn(12 * 4, 8* 4, g_GCenter.player2_data.level, DirType.DT_UP, 0.08);
            }
        }
        else
        {
            this._enemy_map[role] = null;
            this._enemy_count -= 1;
        }

        if (g_GCenter.player_count >= 2 && g_GCenter.player1_data.life <= 0 && g_GCenter.player2_data.life <= 0
        	|| g_GCenter.player_count >= 1 && g_GCenter.player1_data.life <= 0)
        {
            this.ShowGameOver();
        }
    }

    public fun BulletDeath(BattleBullet bullet)
    {
        var exist = this._bullet_map[bullet];
        if (exist == null) return;

        this._bullet_map[bullet] = null;
        bullet.role.AddBullet();
        this._bullet_container.RemoveChild(bullet);
    }
}
