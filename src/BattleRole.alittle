
namespace BattleCity;

public class BattleRole : ALittle.DisplayLayout
{
	private ALittle.FramePlay _effect_born;
	private ALittle.FramePlay _effect_shield;
    private ALittle.FramePlay _effect_explosion;
	private ALittle.Sprite _sprite;

    private int _level = 1;
    private int _dir = 1;

    private int _bullet_total = 1;
    private int _fire_count = 0;

    private double _speed = 0;
    private double _bullet_speed = 0.2;
    private ALittle.LoopObject _effect_shield_loop;
    private ALittle.LoopObject _effect_explosion_loop;

    public fun TCtor()
    {
        this._sprite.visible = false;
        this._effect_born.visible = false;
        this._effect_shield.visible = false;
        this._effect_explosion.visible = false;
    }

    public get is_enemy() : bool { return false; }

    public get alive() : bool
    {
        if (this._effect_born.visible) return false;
        if (this._effect_explosion.visible) return false;
        return true;
    }

    public get explosion() : bool { return this._effect_explosion.visible; }

    public get dir() : int { return this._dir; }
    public get level() : int { return this._level; }

    public fun StartExplosion()
    {
        this._sprite.visible = false;
        this._effect_explosion.visible = true;
        this._effect_explosion.Play();

        if (this._effect_explosion_loop != null) this._effect_explosion_loop.Stop();
        this._effect_explosion_loop = new ALittle.LoopTimer(bind(this.HandleExplosionEnd, this), 1000);
        this._effect_explosion_loop.Start();
    }

    public fun StartShield()
    {
        this._effect_shield.visible = true;
        this._effect_shield.Play();

        if (this._effect_shield_loop != null) this._effect_shield_loop.Stop();
        this._effect_shield_loop = new ALittle.LoopTimer(bind(this.HandleShieldStop, this), 5000);
        this._effect_shield_loop.Start();
    }

    public fun UpdateFrame(int frame_time)
    {
    }

    private fun UpdateWalk(int frame_time)
    {
    }

    // 返回值：是否需要爆炸
    public fun BeAttack() : bool
    {
        return true;
    }

    public fun Fire()
    {
        if (this._fire_count >= this._bullet_total) return;
        this._fire_count += 1;
        g_GCenter.battle_scene.FireBullet(this, this._bullet_speed);
    }

    private fun WalkImpl(int dir, int frame_time, bool adjust) : bool
    {
        if (dir == DirType.DT_UP)
        {
            var col_min = ALittle.Math_Floor(this.x / g_GCenter.battle_scene.cell_size);
            var col_max = ALittle.Math_Floor((this.x + this.width - 1) / g_GCenter.battle_scene.cell_size);

            var cur_row = ALittle.Math_Floor(this.y / g_GCenter.battle_scene.cell_size);
            var y = this.y - frame_time * this._speed;
            if (y <= 0) y = 0;
            var next_row = ALittle.Math_Floor(y / g_GCenter.battle_scene.cell_size);
            var target = this.y;
            var break_row = cur_row;
            for (var row = cur_row; row >= next_row; -1)
            {
                var failed = false;
                for (var col = col_min; col <= col_max; 1)
                {
                    if (!g_GCenter.battle_scene.CanWalkByMap(row, col))
                    {
                        break_row = row;
                        failed = true;
                        break;
                    }
                }
                if (failed) break;
                target = row * g_GCenter.battle_scene.cell_size;
            }
            if (target < y) target = y;

            if (!g_GCenter.battle_scene.CanWalkByEntity(this, this.x, target, this.x + this.width, target + this.height))
                return false;

            if (this.y == target)
            {
                if (!adjust) return false;

                    // 中间都是可以走的
                for (var col = col_min + 1; col < col_max; 1)
                {
                    if (!g_GCenter.battle_scene.CanWalkByMap(break_row, col))
                        return false;
                }

                // 判断是否可以修正
                var left_check = g_GCenter.battle_scene.CanWalkByMap(break_row, col_min);
                var right_check = g_GCenter.battle_scene.CanWalkByMap(break_row, col_max);
                if (!left_check) return this.WalkImpl(DirType.DT_RIGHT, frame_time, false);
                elseif (!right_check) return this.WalkImpl(DirType.DT_LEFT, frame_time, false);
                return false;
            }
            this.y = target;
            return true;
        }

        if (dir == DirType.DT_DOWN)
        {
            var col_min = ALittle.Math_Floor(this.x / g_GCenter.battle_scene.cell_size);
            var col_max = ALittle.Math_Floor((this.x + this.width - 1) / g_GCenter.battle_scene.cell_size);

            var bottom = this.y + this.height;
            var cur_row = ALittle.Math_Floor(bottom / g_GCenter.battle_scene.cell_size);
            var y = bottom + frame_time * this._speed;
            if (y >= g_GCenter.battle_scene.map_size) y = g_GCenter.battle_scene.map_size;
            var next_row = ALittle.Math_Floor(y / g_GCenter.battle_scene.cell_size);
            var target = bottom;
            var break_row = cur_row;
            for (var row = cur_row; row <= next_row; 1)
            {
                var failed = false;
                for (var col = col_min; col <= col_max; 1)
                {
                    if (!g_GCenter.battle_scene.CanWalkByMap(row, col))
                    {
                        break_row = row;
                        failed = true;
                        break;
                    }
                }
                if (failed) break;
                target = (row + 1) * g_GCenter.battle_scene.cell_size;
            }
            if (target > y) target = y;

            if (!g_GCenter.battle_scene.CanWalkByEntity(this, this.x, target - this.height, this.x + this.width, target))
                return false;
            if (this.y == target - this.height)
            {
                if (!adjust) return false;

                    // 中间都是可以走的
                for (var col = col_min + 1; col < col_max; 1)
                {
                    if (!g_GCenter.battle_scene.CanWalkByMap(break_row, col))
                        return false;
                }
                // 判断是否可以修正
                var left_check = g_GCenter.battle_scene.CanWalkByMap(break_row, col_min);
                var right_check = g_GCenter.battle_scene.CanWalkByMap(break_row, col_max);
                if (!left_check) return this.WalkImpl(DirType.DT_RIGHT, frame_time, false);
                elseif (!right_check) return this.WalkImpl(DirType.DT_LEFT, frame_time, false);
                return false;
            }
            this.y = target - this.height;

            return true;
        }

        if (dir == DirType.DT_LEFT)
        {
            var row_min = ALittle.Math_Floor(this.y / g_GCenter.battle_scene.cell_size);
            var row_max = ALittle.Math_Floor((this.y + this.height - 1) / g_GCenter.battle_scene.cell_size);

            var cur_col = ALittle.Math_Floor(this.x / g_GCenter.battle_scene.cell_size);
            var x = this.x - frame_time * this._speed;
            if (x <= 0) x = 0;
            var next_col = ALittle.Math_Floor(x / g_GCenter.battle_scene.cell_size);
            var target = this.x;
            var break_col = cur_col;
            for (var col = cur_col; col >= next_col; -1)
            {
                var failed = false;
                for (var row = row_min; row <= row_max; 1)
                {
                    if (!g_GCenter.battle_scene.CanWalkByMap(row, col))
                    {
                        break_col = col;
                        failed = true;
                        break;
                    }
                }
                if (failed) break;
                target = col * g_GCenter.battle_scene.cell_size;
            }
            if (target < x) target = x;
            if (!g_GCenter.battle_scene.CanWalkByEntity(this, target, this.y, target + this.width, this.y + this.height))
                return false;
            if (this.x == target)
            {
                if (!adjust) return false;

                    // 中间都是可以走的
                for (var row = row_min + 1; row < row_max; 1)
                {
                    if (!g_GCenter.battle_scene.CanWalkByMap(row, break_col))
                        return false;
                }

                // 判断是否可以修正
                var up_check = g_GCenter.battle_scene.CanWalkByMap(row_min, break_col);
                var down_check = g_GCenter.battle_scene.CanWalkByMap(row_max, break_col);
                if (!up_check) return this.WalkImpl(DirType.DT_DOWN, frame_time, false);
                elseif (!down_check) return this.WalkImpl(DirType.DT_UP, frame_time, false);
                return false;
            }
            this.x = target;
            return true;
        }

        if (dir == DirType.DT_RIGHT)
        {
            var row_min = ALittle.Math_Floor(this.y / g_GCenter.battle_scene.cell_size);
            var row_max = ALittle.Math_Floor((this.y + this.height - 1) / g_GCenter.battle_scene.cell_size);

            var right = this.x + this.width;
            var cur_col = ALittle.Math_Floor(right / g_GCenter.battle_scene.cell_size);
            var x = right + frame_time * this._speed;
            if (x >= g_GCenter.battle_scene.map_size) x = g_GCenter.battle_scene.map_size;
            var next_col = ALittle.Math_Floor(x / g_GCenter.battle_scene.cell_size);
            var target = right;
            var break_col = cur_col;
            for (var col = cur_col; col <= next_col; 1)
            {
                var failed = false;
                for (var row = row_min; row <= row_max; 1)
                {
                    if (!g_GCenter.battle_scene.CanWalkByMap(row, col))
                    {
                        break_col = col;
                        failed = true;
                        break;
                    }
                }
                if (failed) break;
                target = (col + 1) * g_GCenter.battle_scene.cell_size;
            }
            if (target > x) target = x;
            if (!g_GCenter.battle_scene.CanWalkByEntity(this, target - this.width, this.y, target, this.y + this.height))
                return false;
            if (this.x == target - this.width)
            {
                if (!adjust) return false;

                    // 中间都是可以走的
                for (var row = row_min + 1; row < row_max; 1)
                {
                    if (!g_GCenter.battle_scene.CanWalkByMap(row, break_col))
                        return false;
                }
                // 判断是否可以修正
                var up_check = g_GCenter.battle_scene.CanWalkByMap(row_min, break_col);
                var down_check = g_GCenter.battle_scene.CanWalkByMap(row_max, break_col);
                if (!up_check) return this.WalkImpl(DirType.DT_DOWN, frame_time, false);
                elseif (!down_check) return this.WalkImpl(DirType.DT_UP, frame_time, false);
                return false;
            }
            this.x = target - this.width;
        
            return true;
        }

        return false;
    }

    public fun Walk(int dir, int frame_time) : bool
    {
        this._dir = dir;
        this.UpdateWalk(frame_time);
        return this.WalkImpl(dir, frame_time, true);
    }

    private fun HandleExplosionEnd()
    {
        var loop = new ALittle.LoopTimer(bind(g_GCenter.battle_scene.RoleDeath, g_GCenter.battle_scene, this), 0);
        loop.Start();
    }

    private fun HandleShieldStop()
    {
        this._effect_shield.visible = false;
        this._effect_shield.Stop();
    }

    public fun AddBullet()
    {
        if (this._fire_count <= 0) return;
        this._fire_count -= 1;
    }

    public fun Clear()
    {
        this._effect_born.Stop();
        this._effect_shield.Stop();
        this._effect_explosion.Stop();
    }
}
